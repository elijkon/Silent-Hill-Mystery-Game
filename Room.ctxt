#BlueJ class context
comment0.target=Room
comment0.text=\r\n\ Class\ Room\ -\ a\ room\ in\ an\ adventure\ game.\r\n\r\n\ This\ class\ is\ part\ of\ the\ "Silent\ Hill"\ application.\ \r\n\ "Silent\ Hill"\ is\ a\ very\ simple,\ text\ based\ adventure\ game.\ \ \r\n\r\n\ A\ "Room"\ represents\ one\ location\ in\ the\ scenery\ of\ the\ game.\ \ It\ is\ \r\n\ connected\ to\ other\ rooms\ via\ exits.\ \ The\ exits\ are\ labelled\ north,\ \r\n\ east,\ south,\ west.\ \ For\ each\ direction,\ the\ room\ stores\ a\ reference\r\n\ to\ the\ neighboring\ room,\ or\ null\ if\ there\ is\ no\ exit\ in\ that\ direction.\r\n\ \r\n\ @author\ \ Michael\ K\u00F6lling\ and\ David\ J.\ Barnes\ and\ Elijah\ Konkle\r\n\ @version\ 2024.04.10\r\n
comment1.params=description
comment1.target=Room(java.lang.String)
comment1.text=\r\n\ Create\ a\ room\ described\ "description".\ Initially,\ it\ has\r\n\ no\ exits.\ "description"\ is\ something\ like\ "a\ kitchen"\ or\r\n\ "an\ open\ court\ yard".\r\n\ @param\ description\ The\ room's\ description.\r\n
comment10.params=
comment10.target=boolean\ hasLooked()
comment10.text=\r\n\ Checks\ to\ see\ if\ the\ room\ has\ been\ looked\ in.\r\n\ @return\ true\ if\ the\ door\ is\ locked,\ false\ if\ otherwise.\ \r\n
comment11.params=
comment11.target=void\ look()
comment11.text=\r\n\ Sets\ the\ room\ to\ true\ when\ looked.\r\n
comment12.params=
comment12.target=boolean\ isLocked()
comment12.text=\r\n\ Checks\ to\ see\ if\ the\ room\ is\ locked.\r\n\ @return\ true\ if\ item\ is\ not\ null,\ false\ if\ otherwise.\r\n
comment13.params=it
comment13.target=void\ lock(Item)
comment13.text=\r\n\ Sets\ the\ room\ to\ locked\ if\ the\ player\ has\ the\ key.\r\n\ @param\ it\ The\ item\ being\ passed\ to\ it.\r\n
comment14.params=it
comment14.target=java.lang.String\ unlock(Item)
comment14.text=\r\n\ If\ lock\ is\ not\ null\ than\ it\ unlocks\ door.\r\n\ @return\ a\ string\ if\ door\ is\ locked\ and\ returns\ item\ if\ the\ item\ does\r\n\ not\ fit.\r\n\ @param\ it\ The\ item\ being\ passed\ to\ it.\r\n
comment15.params=
comment15.target=java.lang.String\ getItemString()
comment15.text=\r\n\ Adds\ every\ item\ in\ your\ inventory\ to\ a\ string\ called\ message.\r\n\ @return\ a\ string\ called\ message.\ \r\n
comment16.params=
comment16.target=java.util.Collection\ neighbors()
comment16.text=\r\n\ Get\ all\ the\ exits\ to\ the\ room.\r\n\ @return\ all\ the\ exits.\r\n
comment17.params=key
comment17.target=void\ removeItem(java.lang.String)
comment17.text=\r\n\ Removes\ and\ item\ from\ the\ iventory.\r\n\ @param\ key\ Passes\ the\ key\ value\ to\ remove\ it\ from\ hashmap.\r\n
comment18.params=key\ item
comment18.target=void\ addItem(java.lang.String,\ Item)
comment18.text=\r\n\ Adds\ a\ item\ to\ the\ room.\r\n\ @param\ key\ The\ key\ attached\ to\ the\ value.\r\n\ @param\ item\ The\ item\ attached\ to\ the\ key.\ \r\n
comment19.params=key
comment19.target=Item\ getItem(java.lang.String)
comment19.text=\r\n\ Gets\ the\ item\ using\ its\ key\ from\ the\ hashmap.\r\n\ @return\ the\ item.\r\n
comment2.params=
comment2.target=boolean\ hasPower()
comment2.text=\r\n\ Checks\ to\ see\ if\ power\ is\ on.\r\n\ @return\ true\ if\ power\ is\ on,\ false\ if\ otherwise.\r\n
comment20.params=direction\ room
comment20.target=void\ setExit(java.lang.String,\ Room)
comment20.text=\r\n\ Define\ the\ exits\ of\ this\ room.\ \ Every\ direction\ either\ leads\r\n\ to\ another\ room\ or\ is\ null\ (no\ exit\ there).\r\n
comment21.params=direction
comment21.target=Room\ getExit(java.lang.String)
comment21.text=\r\n\ Gives\ the\ room\ given\ the\ direction\ from\ current\ room.\r\n\ @return\ the\ exit\ depending\ on\ direction.\r\n
comment22.params=
comment22.target=java.lang.String\ getExitString()
comment22.text=\r\n\ Gets\ all\ the\ exits\ that\ exist\ in\ the\ room\r\n\ @return\ a\ string\ called\ message.\r\n
comment23.params=
comment23.target=java.lang.String\ getDescription()
comment23.text=\r\n\ @return\ The\ description\ of\ the\ room.\r\n
comment24.params=
comment24.target=java.lang.String\ getLongDescription()
comment24.text=\r\n\ @return\ a\ string\ of\ the\ room\ description.\r\n
comment25.params=
comment25.target=java.lang.String\ getLonggDescription()
comment25.text=\r\n\ @return\ a\ string\ of\ the\ room\ description\ and\ items.\r\n
comment26.params=
comment26.target=java.lang.String\ getImage()
comment26.text=\r\n\ @return\ a\ String,\ which\ hopefully\ contains\ the\ file\ name\r\n\ of\ an\ Image\ file.\r\n
comment27.params=filename
comment27.target=void\ setImage(java.lang.String)
comment27.text=\r\n\ associate\ an\ image\ with\ this\ room\r\n\ @param\ filename\ a\ String\ containing\ a\ file.\r\n\ The\ file\ <b>must</b>\ reside\ in\ the\ media\ directory,\ \r\n\ and\ must\ be\ in\ a\ format\ viewable\ in\ the\ Java\ AWT.\r\n\ Readable\ formats\ include\:\ \r\n\ PNG,\ JPG\ (RGB\ color\ scheme\ only),\ GIF\r\n
comment28.params=
comment28.target=java.lang.String\ getAudio()
comment28.text=\r\n\ @return\ a\ String,\ which\ hopefully\ contains\ the\ file\ name\r\n\ of\ an\ audio\ file.\r\n
comment29.params=filename
comment29.target=void\ setAudio(java.lang.String)
comment29.text=\r\n\ associate\ an\ audio\ clip\ with\ this\ room\r\n\ @param\ filename\ a\ String\ containing\ a\ file.\r\n\ The\ file\ <b>must</b>\ reside\ in\ the\ media\ directory,\ \r\n\ and\ must\ be\ in\ a\ format\ palyable\ in\ the\ Java\ AWT.\r\n\ Readable\ formats\ include\:\ \r\n\ WAV,\ AU.\r\n
comment3.params=
comment3.target=void\ turnOn()
comment3.text=\r\n\ Turns\ power\ on.\r\n
comment4.params=
comment4.target=boolean\ hasLever()
comment4.text=\r\n\ Checks\ to\ see\ if\ the\ lever\ is\ in\ place.\r\n\ @return\ true\ if\ lever\ is\ connected,\ false\ otherwise.\r\n
comment5.params=
comment5.target=void\ useLever()
comment5.text=\r\n\ Sets\ the\ lever\ to\ true\ when\ it\ is\ there.\ \r\n
comment6.params=
comment6.target=boolean\ isFull()
comment6.text=\r\n\ Checks\ to\ see\ if\ the\ fuel\ tank\ is\ full.\r\n\ @return\ true\ if\ the\ fuel\ tank\ is\ full,\ false\ if\ otherwise.\ \r\n
comment7.params=
comment7.target=void\ fill()
comment7.text=\r\n\ Sets\ the\ tank\ to\ full.\r\n
comment8.params=
comment8.target=boolean\ hasStarted()
comment8.text=\r\n\ Checks\ to\ see\ if\ the\ lighthouse\ has\ been\ started.\r\n\ @return\ true\ if\ the\ lighthouse\ is\ started,\ false\ if\ otherwise.\r\n
comment9.params=
comment9.target=void\ start()
comment9.text=\r\n\ Sets\ the\ lighthouse\ to\ started.\r\n
numComments=30
